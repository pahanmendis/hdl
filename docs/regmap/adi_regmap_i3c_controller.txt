TITLE
I3C Controller (i3c_controller_host_interface)
i3c_controller_host_interface
ENDTITLE

############################################################################################
############################################################################################

REG
0x00
VERSION
Version of the peripheral. Follows semantic versioning. Current version 0.01.00
ENDREG

FIELD
[31:16] 0x00
VERSION_MAJOR
RO
ENDFIELD

FIELD
[15:8] 0x01
VERSION_MINOR
RO
ENDFIELD

FIELD
[7:0] 0x00
VERSION_PATCH
RO
ENDFIELD

############################################################################################
############################################################################################

REG
0x01
PERIPHERAL_ID
ENDREG

FIELD
[31:0] ''ID''
PERIPHERAL_ID
RO
Value of the ID configuration parameter.
ENDFIELD

############################################################################################
############################################################################################

REG
0x02
SCRATCH
ENDREG

FIELD
[31:0] 0x00000000
SCRATCH
RW
Scratch register useful for debug.
ENDFIELD

############################################################################################
############################################################################################

REG
0x10
ENABLE
ENDREG

FIELD
[0] 0x1
ENABLE
RW
Enable register. If the enable bit is set to 1 the internal state of the peripheral is reset.
For proper operation, the bit needs to be set to 0.
ENDFIELD

############################################################################################
############################################################################################

REG
0x20
IRQ_MASK
ENDREG

FIELD
[0] 0x00
CMD_ALMOST_EMPTY
RW
If set to 0 the CMD_ALMOST_EMPTY interrupt is masked.
ENDFIELD

FIELD
[1] 0x00
CMDR_ALMOST_FULL
RW
If set to 0 the CMDR_ALMOST_FULL interrupt is masked.
ENDFIELD

FIELD
[2] 0x00
SDO_ALMOST_EMPTY
RW
If set to 0 the SDO_ALMOST_EMPTY interrupt is masked.
ENDFIELD

FIELD
[3] 0x00
SDI_ALMOST_FULL
RW
If set to 0 the SDI_ALMOST_FULL interrupt is masked.
ENDFIELD

FIELD
[4] 0x00
IBI_ALMOST_FULL
RW
If set to 0 the IBI_ALMOST_FULL interrupt is masked.

FIELD
[5] 0x00
CMDR_PENDING
RW
If set to 0 the CMDR_PENDING interrupt is masked.

FIELD
[6] 0x00
IBI_PENDING
RW
If set to 0 the IBI_PENDING interrupt is masked.

############################################################################################
############################################################################################

REG
0x21
IRQ_PENDING
ENDREG

FIELD
[31:0] 0x00000000
IRQ_PENDING
RW
Pending IRQs with mask.
Write 1 at the CMDR_PENDING bit to clear it.
ENDFIELD

############################################################################################
############################################################################################

REG
0x22
IRQ_SOURCE
ENDREG

FIELD
[31:0] 0x00000000
IRQ_SOURCE
RO
Pending IRQs without mask.
ENDFIELD

############################################################################################
############################################################################################

REG
0x30
CMD_FIFO_ROOM
ENDREG

FIELD
[31:0] 0x???????? %TODO
CMD_FIFO_ROOM
RO
Number of free entries in the CMD FIFO.
ENDFIELD

############################################################################################
############################################################################################

REG
0x31
CMDR_FIFO_LEVEL
ENDREG

FIELD
[31:0] 0x00000000
CMDR_FIFO_LEVEL
RO
Number of valid entries in the CMDR FIFO.
ENDFIELD

############################################################################################
############################################################################################

REG
0x32
SDO_FIFO_ROOM
ENDREG

FIELD
[31:0] 0x????????
SDO_FIFO_ROOM
RO
Number of free entries in the SDO FIFO.
ENDFIELD

############################################################################################
############################################################################################

REG
0x33
SDI_FIFO_LEVEL
ENDREG

FIELD
[31:0] 0x00000000
SDI_FIFO_LEVEL
RO
Number of valid entries in the serial-data-in FIFO.
ENDFIELD

############################################################################################
############################################################################################

REG
0x34
IBI_FIFO_LEVEL
ENDREG

FIELD
[31:0] 0x00000000
IBI_FIFO_LEVEL
RO
Number of valid entries in the in-bus-interrupt FIFO.
ENDFIELD

############################################################################################
############################################################################################

REG
0x35
CMD_FIFO
Command FIFO register. Writing to this register inserts an entry into the CMD FIFO.
Writing to this register when the CMD FIFO is full has no effect and the written entry
is discarded. Reading from this register always returns 0x00000000.
The Software is responsive for a valid sequence of commands.
If the peripheral does not ACK when required during a command, the procedure exits and the
next command in the FIFO is interpreted.
See Instruction Set Specification in the wiki documentation for the structure of the command.
ENDREG

FIELD
[31:0] 0x??
CMD_FIFO
WO
The command to the I3C controller to execute.
ENDFIELD

############################################################################################
############################################################################################

REG
0x36
CMDR_FIFO
CMDR FIFO register. Reading from this register removes the first entry from the CMDR FIFO.
Reading this register when the CMDR FIFO is empty will return undefined data.
Writing to it has no effect.
ENDREG

FIELD
[31:0] 0x??
CMDR_FIFO
RO
ENDFIELD


############################################################################################
############################################################################################

REG
0x37
SDO_FIFO
SDO FIFO register. Writing to this register inserts an entry into the SDO FIFO.
Writing to this register when the SDO FIFO is full has no effect and the written entry
is discarded. Reading from this register always returns 0x00000000.
ENDREG

FIELD
[31:24] 0x??
SDO_FIFO_BYTE_3
RO
ENDFIELD

FIELD
[23:16] 0x??
SDO_FIFO_BYTE_2
RO
ENDFIELD

FIELD
[15:8] 0x??
SDO_FIFO_BYTE_1
RO
ENDFIELD

FIELD
[7:0] 0x??
SDO_FIFO_BYTE_0
RO
ENDFIELD

############################################################################################
############################################################################################

REG
0x38
SDI_FIFO
SDI FIFO register. Reading from this register removes the first entry from the SDI FIFO.
Reading this register when the SDI FIFO is empty will return undefined data.
Writing to it has no effect.
ENDREG

FIELD
[31:0] 0x??
SDI_FIFO
RO
ENDFIELD

############################################################################################
############################################################################################

REG
0x39
IBI_FIFO
ENDREG

FIELD
[31:24] 0x??
IBI_FIFO_BYTE_3
RO
ENDFIELD

FIELD
[23:16] 0x??
IBI_FIFO_BYTE_2
RO
ENDFIELD

FIELD
[15:8] 0x??
IBI_FIFO_BYTE_1
RO
ENDFIELD

FIELD
[7:0] 0x??
IBI_FIFO_BYTE_0
RO
ENDFIELD

############################################################################################
############################################################################################

REG
0x3a
FIFO_STATUS
ENDREG

FIELD
[0] 0x1
CMDR_EMPTY
RO
If there is no element to be read in the CMDR FIFO.
ENDFIELD

FIELD
[1] 0x1
IBI_EMPTY
RO
If there is no element to be read in the IBI FIFO.
ENDFIELD

FIELD
[2] 0x1
SDI_EMPTY
RO
If there is no element to be read in the SDI FIFO.
ENDFIELD

############################################################################################
############################################################################################

REG
0x40
OPS
ENDREG

FIELD
[0] 0x??
OPS_MODE
WO
Set 0 to private transfers, 1 to offload.
ENDFIELD

FIELD
[4:1] 0x??
OPS_OFFLOAD_LENGTH
WO
Offload commands length.
ENDFIELD

FIELD
[6:5] 0x??
OPS_SPEED_GRADE
RW
Sets the speed grade in push-pull mode.
Speed with 100MHz driver clock are:
00: 12.50MHz
01:  6.25MHz
10:  3.12MHz
11:  1.56MHz (default)
ENDFIELD

[5] 0x0
OPS_STATUS_DAA
RO
This bit is set to 1 when the assignment is in progress.
ENDFIELD

[6] 0x0
OPS_STATUS_NOP
RO
This bit is set to 1 when the bus is not executing any procedure.
Is not idle bus condition since it does take 200us after Stop to set.
ENDFIELD

############################################################################################
############################################################################################

REG
0x50
IBI_CONFIG
ENDREG

FIELD
[0] 0x??
IBI_CONFIG_ENABLE
WO
Set this bit to accept (ACK) IBI requests.
If disabled, the controller will NACK IBI requests.
If enabled, the controller will ACK the IBI request and receive the MDB.
In both cases, the controller will proceed with the cmd transfer after resolving the IBI
request.
Accepted IBIs fill the IBI_FIFO and generate an interruption in the PS.
ENDFIELD

FIELD
[1] 0x??
IBI_CONFIG_AUTO
WO
Set this bit to listen for IBI requests (when a peripheral pulls SDA Low during quiet times).
After the IBI request is resolved, the controller returns to idle, since it is was not doing
a cmd transfer.
IBI_CONFIG_ENABLE must be set 1.
ENDFIELD

############################################################################################
############################################################################################

REG
0x60 + 0x01*n
DEV_CHAR_0_n
Controller/peripheral bus and device characteristics, fields defined by the I3C specification.
0x60 is the controller.
ENDREG

FIELD
[0:0] 0x???
DEV_CHAR_0_n_DA_PARIETY
RW
Pariety of the dynamic address.
ENDFIELD

FIELD
[7:1] 0x???
DEV_CHAR_0_n_DA
RW
Dynamic address.
ENDFIELD

FIELD
[8:8] 0x1
DEV_CHAR_0_n_IS_I3C
RW
Indicates if the device is an I3C device.
Since only I3C is supported, will always be 1.
ENDFIELD

############################################################################################
############################################################################################

REG
0x70 + 0x01*n
DEV_CHAR_1_n
Controller/peripheral bus and device characteristics, fields defined by the I3C specification.
The values are fetched from the peripheral during the DAA.
For the controller slot, the values are preset by parameters.
0x70 is the controller.
ENDREG

FIELD
[31:0] 0x???
DEV_CHAR_1_n_PID_1
RW
32-MSB from the PID.
ENDFIELD

############################################################################################
############################################################################################

REG
0x80 + 0x01*n
DEV_CHAR_2_n
Controller/peripheral bus and device characteristics, fields defined by the I3C specification.
The values are fetched from the peripheral during the DAA.
For the controller slot, the values are preset by parameters.
0x80 is the controller.
ENDREG

FIELD
[7:0] 0x???
DEV_CHAR_2_n_DCR/LVR
RW
Stores the DCR of I3C devices or LVR of I2C devices.
LVR should only be written, and DCR only be read.
Currently, LVR has no effect.
ENDFIELD

FIELD
[15:8] 0x???
DEV_CHAR_2_n_BCR
RW
Should only be read.
ENDFIELD

FIELD
[31:16] 0x???
DEV_CHAR_2_n_PID_0
RW
16-LSB from the PID.
Should only be read.
ENDFIELD

############################################################################################
############################################################################################

REG
0xa0
DEVS_CTRL
ENDREG

FIELD
[15:0] 0x??
DEVS_CTRL
RW
Slots for peripherals, each HIGH bit represents a peripherals attached.
The index match the DEV_CHAR_*_ indexes.
The Controller, index 0, is set to HIGH when a DA is written to DEV_CHAR_0_0,
while the others peripherals are set HIGH when the peripherals actually
receives the DA during the DAA.
The state can also be overwritten to explicit attach device (e.g. has static addr).
ENDFIELD

FIELD
[31:16] 0x??
DEVS_CLR
WO
Write the index of a peripheral (offset by 16) bit to clear its slot.
The stored value in DEV_CHAR_*_* is not affected by this register.
ENDFIELD

############################################################################################
############################################################################################

REG
0xb0 + 0x01*n
OFFLOAD_CMD_n
Offload command memory. Write commands in sequence to these addresses and update the
OFFLOAD_CMD_LENGTH register.
ENDREG

############################################################################################
############################################################################################

REG
0xc0 + 0x01*n
OFFLOAD_SDO_n
Offload SDO memory.
The length is infered by the commands and reset after each burst.
ENDREG

############################################################################################
############################################################################################
